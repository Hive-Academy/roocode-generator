import { ProjectConfig } from '../../../types/shared';
import { Result } from '../../core/result/result';

export interface RulesMetadata {
  mode: string;
  format?: 'markdown' | 'json';
  options?: {
    analysisDepth?: 'basic' | 'detailed';
    includeExamples?: boolean;
  };
}

export interface GeneratedRules {
  mode: string;
  content: string;
  metadata: RulesMetadata;
}

// Omit baseDir from ProjectConfig since it's optional in our case
export interface RulesConfig extends Omit<ProjectConfig, 'baseDir'> {
  mode: string;
  baseDir: string;
  contextPaths: string[];
  options?: {
    format?: 'markdown' | 'json';
    analysisDepth?: 'basic' | 'detailed';
    includeExamples?: boolean;
  };
}

export interface MultiModeRulesConfig extends Omit<ProjectConfig, 'baseDir'> {
  modes?: string[];
  baseDir: string;
  contextPaths: string[];
  options?: {
    format: 'markdown' | 'json';
    analysisDepth?: 'basic' | 'detailed';
    includeExamples?: boolean;
  };
}

/**
 * Interface for building prompts specific to rules generation.
 */
export interface IRulesPromptBuilder {
  buildPrompt(instructions: string, context: string): Result<string, Error>;
  buildSystemPrompt(mode: string): Result<string, Error>;
}

/**
 * Interface for processing the content generated by the LLM for rules.
 */
export interface IRulesContentProcessor {
  stripMarkdownCodeBlock(content: string): Result<string, Error>;
}
